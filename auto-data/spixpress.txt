################################################################################
##
## Filename: 	spixpress.txt
## {{{
## Project:	ICO Zip, iCE40 ZipCPU demonstration project
##
## Purpose:	Describes the flash in our new data format.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2017-2021, Gisselquist Technology, LLC
## {{{
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX= flash
@DEVID=FLASH
@ACCESS=@$(DEVID)_ACCESS
@$LGFLASHSZ.EXPR=24
@$NADDR=(1<<(@$LGFLASHSZ-2))
@$NBYTES=(1<<@$LGFLASHSZ)
@NBYTES.FORMAT=0x%08x
@SLAVE.TYPE=MEMORY
@SLAVE.BUS=wb
@LD.PERM=rx
@TOP.PORTLIST=
		// Top level Dual-SPI I/O ports
		o_spi_cs_n, o_spi_sck, o_spi_mosi, i_spi_miso
@TOP.IODECL=
	// Dual SPI flash
	output	wire		o_spi_cs_n;
	output	wire		o_spi_sck, o_spi_mosi;
	input	wire		i_spi_miso;
@TOP.DEFNS=
	wire		spi_sck;
@TOP.MAIN=
		// SPI flash
		o_spi_cs_n, spi_sck, o_spi_mosi, i_spi_miso
@TOP.INSERT=
	//
	//
	// Wires for setting up the SPI flash wishbone peripheral
	//
	//
	oclkddr spi_ddr_sck(s_clk, {!spi_sck, 1'b1}, o_spi_sck);

@MAIN.PORTLIST=
		// The SPI Flash
		o_spi_cs_n, o_spi_sck, o_spi_mosi, i_spi_miso
@MAIN.IODECL=
	// The SPI flash
	output	wire		o_spi_cs_n;
	output	wire		o_spi_sck;
	output	wire		o_spi_mosi;
	input	wire		i_spi_miso;
@MAIN.INSERT=
	spixpress @$(PREFIX)i(i_clk, i_reset,
			@$(SLAVE.PORTLIST),
			@$(flashcfg.SLAVE.PORTLIST),
			o_spi_cs_n, o_spi_sck, o_spi_mosi, i_spi_miso);
@MAIN.ALT=
	assign	o_spi_cs_n = 1'b1;
	assign	o_spi_sck  = 1'b0;
	assign	o_spi_mosi = 1'b1;
@MEM.NAME= flash
@MEM.ACCESS = rx
@REGS.N= 1
@REGDEFS.H.DEFNS=
#define	@$(DEVID)BASE	@$[0x%08x](REGBASE)
#define	@$(DEVID)LEN	@$NBYTES
#define	@$(DEVID)LGLEN	@$LGFLASHSZ
@REGS.0= 0 R_@$(DEVID) @$(DEVID)
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=extern char _@$(PREFIX)[@$NBYTES];
@LD.PERM=	rx
@LD.NAME=	@$(PREFIX)
@SIM.INCLUDE=
#include "flashsim.h"
@SIM.DEFNS=
#ifdef	@$(ACCESS)
	FLASHSIM	*m_@$(MEM.NAME);
	int		m_@$(MEM.NAME)_last_sck;
#endif // @$(ACCESS)
@SIM.INIT=
#ifdef	@$(ACCESS)
		m_@$(MEM.NAME) = new FLASHSIM(FLASHLGLEN);
		m_@$(MEM.NAME)_last_sck = 0;
#endif
@SIM.CLOCK=clk
@SIM.TICK=
#ifdef	@$(ACCESS)
		if (m_@$(MEM.NAME)_last_sck) {
			(*m_@$(MEM.NAME))(m_core->o_spi_cs_n, 0,
						m_core->o_spi_mosi);
		} m_core->i_spi_miso = ((*m_@$(MEM.NAME))(m_core->o_spi_cs_n, 1,
						m_core->o_spi_mosi)&2)?1:0;
		m_@$(MEM.NAME)_last_sck = m_core->o_spi_sck;
#endif // @$(ACCESS)
@SIM.LOAD=
#ifdef	@$(ACCESS)
			m_@$(MEM.NAME)->load(start, &buf[offset], wlen);
#endif // @$(ACCESS)
#
#
#
#
#
@RTL.MAKE.GROUP= FLASH
@RTL.MAKE.FILES= spixpress.v oclkddr.v cpu/wbarbiter.v
#
#
#
@PREFIX=flashcfg
@NADDR=1
@DEVID=FLASHCFG
@ACCESS=@$(DEVID)_ACCESS
@DEPENDS= FLASH_ACCESS
## Although this is really a SLAVE.TYPE=SINGLE interface, it receives its
## acknowledgements from the flash above.  SLAVE.TYPE=SINGLE will create
## acknowledgements in the interconnect, resulting in bus errors.  As a result,
## this must be a SLAVE.TYPE=OTHER
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wb
@MAIN.DEFNS=
@MAIN.INSERT=
@REGS.N= 1
@REGS.0= 0  R_@$(DEVID) @$(DEVID)
@REGDEFS.H.INSERT=
// Flash memory constants
#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))


