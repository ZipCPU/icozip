################################################################################
##
## Filename: 	mem_sram_bkram.txt
##
## Project:	OpenArty, an entirely open SoC based upon the Arty platform
##
## Purpose:	Describes a memory model containing nothing more than flash
##		and block RAM.  This will be used to create a board.ld linker
##	script that can be used to link ZipCPU programs.
##
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017-2018, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
##
@PREFIX=mem_sram_bkram
@MASTER.TYPE=CPU
@MASTER.BUS=zip
@LD.FILE=board.ld
@LD.DEFNS=
/* LD.DEFNS from zipbones.txt */
_kram  = 0; /* No high-speed kernel RAM */
_ram   = ORIGIN(bkram);
_rom   = ORIGIN(flash);
_top_of_stack = ORIGIN(bkram) + LENGTH(bkram);

@LD.SCRIPT=
/* LD.SCRIPT from zipbones.txt */
MEMORY
{
		bkram(wx) : ORIGIN = 0x00C00000, LENGTH = 0x00002000
		sram(wx) : ORIGIN = 0x00E0000, LENGTH = 0x01000000
		flash(rx) : ORIGIN = 0x01000000, LENGTH = 0x01000000
}

_bkram    = ORIGIN(bkram);
_sram    = ORIGIN(sram);
_flash    = ORIGIN(flash);
SECTIONS
{
        .rocode 0x01020000 : ALIGN(4) {
                _boot_address = .;
                *(.start) *(.boot)
        } > flash
        _kernel_image_start = . ;
        _kernel_image_end = . ;
        _ram_image_start = . ;
        .ramcode : ALIGN_WITH_INPUT {
                *(.kernel)
                *(.text.startup)
                *(.text*)
                *(.rodata*) *(.strings)
                *(.data) *(COMMON)
                }> sram AT> flash
        _ram_image_end = . ;
        .bss : ALIGN_WITH_INPUT {
                *(.bss)
                _bss_image_end = . ;
                } > sram
        _top_of_heap = .;

}
#
